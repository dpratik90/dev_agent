Sure, here's a minimal structure for your FastAPI-based Task Management API. I will describe the directory structure and files required for this.

The directory structure should look something like this:
```
/app
    /models
        __init__.py
        task.py
    /schemas
        __init__.py
        task.py
    /auth
        __init__.py
        auth_handler.py
    /cruds
        __init__.py
        task.py
    /utils
        __init__.py
        helpers.py
    main.py
    database.py
    config.py
```

Each file should be initiated as follows:

main.py
```python
from fastapi import FastAPI
from .database import engine
from . import models

models.Base.metadata.create_all(bind=engine)

app = FastAPI() 

# Include more router, middleware here
```
database.py
```python
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

SQLALCHEMY_DATABASE_URL = "sqlite:///./test.db" 

engine = create_engine(SQLALCHEMY_DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# use these in further files to work with database
```
config.py
```python
from pydantic import BaseSettings 

class Settings(BaseSettings):
    app_name: str = "FastAPI Task Management API"

settings = Settings()

#config values can be set and accessed via the "settings" object
```
requirements.txt
```
fastapi==0.63.0 
uvicorn==0.14.0 
sqlalchemy==1.4.15
pydantic==1.8.2 
```
Within your specific model, schema, crud, auth and utils folders, you would implement classes or a series of routes relevant to each respective task. 

For instance, a simple model, task.py located in /app/models might look like:
```python
from sqlalchemy import Column, Integer, String, ForeignKey, DateTime
import datetime
from .database import Base

class Task(Base):
    __tablename__ = "tasks"

    id = Column(Integer, primary_key=True, index=True)
    title = Column(String, index=True)
    description = Column(String, index=True)
    created_date = Column(DateTime, default=datetime.datetime.utcnow)
    is_completed = Column(Boolean, default=False)
```
Remember this is a very basic setup and could require additional setup according to your needs like database configuration, security (CORS, CSRF), etc.
